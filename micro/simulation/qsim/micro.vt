// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/04/2019 11:35:52"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    micro
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module micro_vlg_sample_tst(
	clk,
	reset,
	RI1_inC,
	RI2_inC,
	sampler_tx
);
input  clk;
input  reset;
input [7:0] RI1_inC;
input [7:0] RI2_inC;
output sampler_tx;

reg sample;
time current_time;
always @(clk or reset or RI1_inC or RI2_inC)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module micro_vlg_check_tst (
	outGenerico1,
	outGenerico2,
	outGenerico3,
	outGenerico4,
	outGenerico5,
	outGenerico6,
	outGenerico7,
	ResetOut,
	RO1_outC,
	RO2_outC,
	saiClock,
	sampler_rx
);
input [15:0] outGenerico1;
input [10:0] outGenerico2;
input [7:0] outGenerico3;
input [7:0] outGenerico4;
input [7:0] outGenerico5;
input [7:0] outGenerico6;
input  outGenerico7;
input  ResetOut;
input [7:0] RO1_outC;
input [7:0] RO2_outC;
input  saiClock;
input sampler_rx;

reg [15:0] outGenerico1_expected;
reg [10:0] outGenerico2_expected;
reg [7:0] outGenerico3_expected;
reg [7:0] outGenerico4_expected;
reg [7:0] outGenerico5_expected;
reg [7:0] outGenerico6_expected;
reg  outGenerico7_expected;
reg  ResetOut_expected;
reg [7:0] RO1_outC_expected;
reg [7:0] RO2_outC_expected;
reg  saiClock_expected;

reg [15:0] outGenerico1_prev;
reg [10:0] outGenerico2_prev;
reg [7:0] outGenerico3_prev;
reg [7:0] outGenerico4_prev;
reg [7:0] outGenerico5_prev;
reg [7:0] outGenerico6_prev;
reg  outGenerico7_prev;
reg  ResetOut_prev;
reg [7:0] RO1_outC_prev;
reg [7:0] RO2_outC_prev;
reg  saiClock_prev;

reg [15:0] outGenerico1_expected_prev;
reg [10:0] outGenerico2_expected_prev;
reg [7:0] outGenerico3_expected_prev;
reg [7:0] outGenerico4_expected_prev;
reg [7:0] outGenerico5_expected_prev;
reg [7:0] outGenerico6_expected_prev;
reg  outGenerico7_expected_prev;
reg  ResetOut_expected_prev;
reg [7:0] RO1_outC_expected_prev;
reg [7:0] RO2_outC_expected_prev;
reg  saiClock_expected_prev;

reg [15:0] last_outGenerico1_exp;
reg [10:0] last_outGenerico2_exp;
reg [7:0] last_outGenerico3_exp;
reg [7:0] last_outGenerico4_exp;
reg [7:0] last_outGenerico5_exp;
reg [7:0] last_outGenerico6_exp;
reg  last_outGenerico7_exp;
reg  last_ResetOut_exp;
reg [7:0] last_RO1_outC_exp;
reg [7:0] last_RO2_outC_exp;
reg  last_saiClock_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:11] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 11'b1;
end

// update real /o prevs

always @(trigger)
begin
	outGenerico1_prev = outGenerico1;
	outGenerico2_prev = outGenerico2;
	outGenerico3_prev = outGenerico3;
	outGenerico4_prev = outGenerico4;
	outGenerico5_prev = outGenerico5;
	outGenerico6_prev = outGenerico6;
	outGenerico7_prev = outGenerico7;
	ResetOut_prev = ResetOut;
	RO1_outC_prev = RO1_outC;
	RO2_outC_prev = RO2_outC;
	saiClock_prev = saiClock;
end

// update expected /o prevs

always @(trigger)
begin
	outGenerico1_expected_prev = outGenerico1_expected;
	outGenerico2_expected_prev = outGenerico2_expected;
	outGenerico3_expected_prev = outGenerico3_expected;
	outGenerico4_expected_prev = outGenerico4_expected;
	outGenerico5_expected_prev = outGenerico5_expected;
	outGenerico6_expected_prev = outGenerico6_expected;
	outGenerico7_expected_prev = outGenerico7_expected;
	ResetOut_expected_prev = ResetOut_expected;
	RO1_outC_expected_prev = RO1_outC_expected;
	RO2_outC_expected_prev = RO2_outC_expected;
	saiClock_expected_prev = saiClock_expected;
end


// expected RO1_outC[ 7 ]
initial
begin
	RO1_outC_expected[7] = 1'bX;
	RO1_outC_expected[7] = #999000 1'b0;
end 
// expected RO1_outC[ 6 ]
initial
begin
	RO1_outC_expected[6] = 1'bX;
	RO1_outC_expected[6] = #999000 1'b0;
end 
// expected RO1_outC[ 5 ]
initial
begin
	RO1_outC_expected[5] = 1'bX;
	RO1_outC_expected[5] = #999000 1'b0;
end 
// expected RO1_outC[ 4 ]
initial
begin
	RO1_outC_expected[4] = 1'bX;
	RO1_outC_expected[4] = #999000 1'b0;
end 
// expected RO1_outC[ 3 ]
initial
begin
	RO1_outC_expected[3] = 1'bX;
	RO1_outC_expected[3] = #999000 1'b0;
end 
// expected RO1_outC[ 2 ]
initial
begin
	RO1_outC_expected[2] = 1'bX;
	RO1_outC_expected[2] = #999000 1'b0;
end 
// expected RO1_outC[ 1 ]
initial
begin
	RO1_outC_expected[1] = 1'bX;
	RO1_outC_expected[1] = #999000 1'b0;
end 
// expected RO1_outC[ 0 ]
initial
begin
	RO1_outC_expected[0] = 1'bX;
	RO1_outC_expected[0] = #999000 1'b0;
end 
// expected RO2_outC[ 7 ]
initial
begin
	RO2_outC_expected[7] = 1'bX;
	RO2_outC_expected[7] = #999000 1'b0;
end 
// expected RO2_outC[ 6 ]
initial
begin
	RO2_outC_expected[6] = 1'bX;
	RO2_outC_expected[6] = #999000 1'b0;
end 
// expected RO2_outC[ 5 ]
initial
begin
	RO2_outC_expected[5] = 1'bX;
	RO2_outC_expected[5] = #999000 1'b0;
end 
// expected RO2_outC[ 4 ]
initial
begin
	RO2_outC_expected[4] = 1'bX;
	RO2_outC_expected[4] = #999000 1'b0;
end 
// expected RO2_outC[ 3 ]
initial
begin
	RO2_outC_expected[3] = 1'bX;
	RO2_outC_expected[3] = #999000 1'b0;
end 
// expected RO2_outC[ 2 ]
initial
begin
	RO2_outC_expected[2] = 1'bX;
	RO2_outC_expected[2] = #999000 1'b0;
end 
// expected RO2_outC[ 1 ]
initial
begin
	RO2_outC_expected[1] = 1'bX;
	RO2_outC_expected[1] = #999000 1'b0;
end 
// expected RO2_outC[ 0 ]
initial
begin
	RO2_outC_expected[0] = 1'bX;
	RO2_outC_expected[0] = #999000 1'b0;
end 
// expected outGenerico1[ 15 ]
initial
begin
	outGenerico1_expected[15] = 1'bX;
end 
// expected outGenerico1[ 14 ]
initial
begin
	outGenerico1_expected[14] = 1'bX;
end 
// expected outGenerico1[ 13 ]
initial
begin
	outGenerico1_expected[13] = 1'bX;
end 
// expected outGenerico1[ 12 ]
initial
begin
	outGenerico1_expected[12] = 1'bX;
end 
// expected outGenerico1[ 11 ]
initial
begin
	outGenerico1_expected[11] = 1'bX;
end 
// expected outGenerico1[ 10 ]
initial
begin
	outGenerico1_expected[10] = 1'bX;
end 
// expected outGenerico1[ 9 ]
initial
begin
	outGenerico1_expected[9] = 1'bX;
end 
// expected outGenerico1[ 8 ]
initial
begin
	outGenerico1_expected[8] = 1'bX;
end 
// expected outGenerico1[ 7 ]
initial
begin
	outGenerico1_expected[7] = 1'bX;
end 
// expected outGenerico1[ 6 ]
initial
begin
	outGenerico1_expected[6] = 1'bX;
end 
// expected outGenerico1[ 5 ]
initial
begin
	outGenerico1_expected[5] = 1'bX;
end 
// expected outGenerico1[ 4 ]
initial
begin
	outGenerico1_expected[4] = 1'bX;
end 
// expected outGenerico1[ 3 ]
initial
begin
	outGenerico1_expected[3] = 1'bX;
end 
// expected outGenerico1[ 2 ]
initial
begin
	outGenerico1_expected[2] = 1'bX;
end 
// expected outGenerico1[ 1 ]
initial
begin
	outGenerico1_expected[1] = 1'bX;
end 
// expected outGenerico1[ 0 ]
initial
begin
	outGenerico1_expected[0] = 1'bX;
end 
// expected outGenerico2[ 10 ]
initial
begin
	outGenerico2_expected[10] = 1'bX;
end 
// expected outGenerico2[ 9 ]
initial
begin
	outGenerico2_expected[9] = 1'bX;
end 
// expected outGenerico2[ 8 ]
initial
begin
	outGenerico2_expected[8] = 1'bX;
end 
// expected outGenerico2[ 7 ]
initial
begin
	outGenerico2_expected[7] = 1'bX;
end 
// expected outGenerico2[ 6 ]
initial
begin
	outGenerico2_expected[6] = 1'bX;
end 
// expected outGenerico2[ 5 ]
initial
begin
	outGenerico2_expected[5] = 1'bX;
end 
// expected outGenerico2[ 4 ]
initial
begin
	outGenerico2_expected[4] = 1'bX;
end 
// expected outGenerico2[ 3 ]
initial
begin
	outGenerico2_expected[3] = 1'bX;
end 
// expected outGenerico2[ 2 ]
initial
begin
	outGenerico2_expected[2] = 1'bX;
end 
// expected outGenerico2[ 1 ]
initial
begin
	outGenerico2_expected[1] = 1'bX;
end 
// expected outGenerico2[ 0 ]
initial
begin
	outGenerico2_expected[0] = 1'bX;
end 
// expected outGenerico3[ 7 ]
initial
begin
	outGenerico3_expected[7] = 1'bX;
end 
// expected outGenerico3[ 6 ]
initial
begin
	outGenerico3_expected[6] = 1'bX;
end 
// expected outGenerico3[ 5 ]
initial
begin
	outGenerico3_expected[5] = 1'bX;
end 
// expected outGenerico3[ 4 ]
initial
begin
	outGenerico3_expected[4] = 1'bX;
end 
// expected outGenerico3[ 3 ]
initial
begin
	outGenerico3_expected[3] = 1'bX;
end 
// expected outGenerico3[ 2 ]
initial
begin
	outGenerico3_expected[2] = 1'bX;
end 
// expected outGenerico3[ 1 ]
initial
begin
	outGenerico3_expected[1] = 1'bX;
end 
// expected outGenerico3[ 0 ]
initial
begin
	outGenerico3_expected[0] = 1'bX;
end 
// expected outGenerico4[ 7 ]
initial
begin
	outGenerico4_expected[7] = 1'bX;
end 
// expected outGenerico4[ 6 ]
initial
begin
	outGenerico4_expected[6] = 1'bX;
end 
// expected outGenerico4[ 5 ]
initial
begin
	outGenerico4_expected[5] = 1'bX;
end 
// expected outGenerico4[ 4 ]
initial
begin
	outGenerico4_expected[4] = 1'bX;
end 
// expected outGenerico4[ 3 ]
initial
begin
	outGenerico4_expected[3] = 1'bX;
end 
// expected outGenerico4[ 2 ]
initial
begin
	outGenerico4_expected[2] = 1'bX;
end 
// expected outGenerico4[ 1 ]
initial
begin
	outGenerico4_expected[1] = 1'bX;
end 
// expected outGenerico4[ 0 ]
initial
begin
	outGenerico4_expected[0] = 1'bX;
end 
// expected outGenerico5[ 7 ]
initial
begin
	outGenerico5_expected[7] = 1'bX;
end 
// expected outGenerico5[ 6 ]
initial
begin
	outGenerico5_expected[6] = 1'bX;
end 
// expected outGenerico5[ 5 ]
initial
begin
	outGenerico5_expected[5] = 1'bX;
end 
// expected outGenerico5[ 4 ]
initial
begin
	outGenerico5_expected[4] = 1'bX;
end 
// expected outGenerico5[ 3 ]
initial
begin
	outGenerico5_expected[3] = 1'bX;
end 
// expected outGenerico5[ 2 ]
initial
begin
	outGenerico5_expected[2] = 1'bX;
end 
// expected outGenerico5[ 1 ]
initial
begin
	outGenerico5_expected[1] = 1'bX;
end 
// expected outGenerico5[ 0 ]
initial
begin
	outGenerico5_expected[0] = 1'bX;
end 
// expected outGenerico6[ 7 ]
initial
begin
	outGenerico6_expected[7] = 1'bX;
end 
// expected outGenerico6[ 6 ]
initial
begin
	outGenerico6_expected[6] = 1'bX;
end 
// expected outGenerico6[ 5 ]
initial
begin
	outGenerico6_expected[5] = 1'bX;
end 
// expected outGenerico6[ 4 ]
initial
begin
	outGenerico6_expected[4] = 1'bX;
end 
// expected outGenerico6[ 3 ]
initial
begin
	outGenerico6_expected[3] = 1'bX;
end 
// expected outGenerico6[ 2 ]
initial
begin
	outGenerico6_expected[2] = 1'bX;
end 
// expected outGenerico6[ 1 ]
initial
begin
	outGenerico6_expected[1] = 1'bX;
end 
// expected outGenerico6[ 0 ]
initial
begin
	outGenerico6_expected[0] = 1'bX;
end 

// expected outGenerico7
initial
begin
	outGenerico7_expected = 1'bX;
end 

// expected ResetOut
initial
begin
	ResetOut_expected = 1'bX;
end 

// expected saiClock
initial
begin
	saiClock_expected = 1'bX;
end 
// generate trigger
always @(outGenerico1_expected or outGenerico1 or outGenerico2_expected or outGenerico2 or outGenerico3_expected or outGenerico3 or outGenerico4_expected or outGenerico4 or outGenerico5_expected or outGenerico5 or outGenerico6_expected or outGenerico6 or outGenerico7_expected or outGenerico7 or ResetOut_expected or ResetOut or RO1_outC_expected or RO1_outC or RO2_outC_expected or RO2_outC or saiClock_expected or saiClock)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected outGenerico1 = %b | expected outGenerico2 = %b | expected outGenerico3 = %b | expected outGenerico4 = %b | expected outGenerico5 = %b | expected outGenerico6 = %b | expected outGenerico7 = %b | expected ResetOut = %b | expected RO1_outC = %b | expected RO2_outC = %b | expected saiClock = %b | ",outGenerico1_expected_prev,outGenerico2_expected_prev,outGenerico3_expected_prev,outGenerico4_expected_prev,outGenerico5_expected_prev,outGenerico6_expected_prev,outGenerico7_expected_prev,ResetOut_expected_prev,RO1_outC_expected_prev,RO2_outC_expected_prev,saiClock_expected_prev);
	$display("| real outGenerico1 = %b | real outGenerico2 = %b | real outGenerico3 = %b | real outGenerico4 = %b | real outGenerico5 = %b | real outGenerico6 = %b | real outGenerico7 = %b | real ResetOut = %b | real RO1_outC = %b | real RO2_outC = %b | real saiClock = %b | ",outGenerico1_prev,outGenerico2_prev,outGenerico3_prev,outGenerico4_prev,outGenerico5_prev,outGenerico6_prev,outGenerico7_prev,ResetOut_prev,RO1_outC_prev,RO2_outC_prev,saiClock_prev);
`endif
	if (
		( outGenerico1_expected_prev[0] !== 1'bx ) && ( outGenerico1_prev[0] !== outGenerico1_expected_prev[0] )
		&& ((outGenerico1_expected_prev[0] !== last_outGenerico1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico1_expected_prev);
		$display ("     Real value = %b", outGenerico1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outGenerico1_exp[0] = outGenerico1_expected_prev[0];
	end
	if (
		( outGenerico1_expected_prev[1] !== 1'bx ) && ( outGenerico1_prev[1] !== outGenerico1_expected_prev[1] )
		&& ((outGenerico1_expected_prev[1] !== last_outGenerico1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico1_expected_prev);
		$display ("     Real value = %b", outGenerico1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outGenerico1_exp[1] = outGenerico1_expected_prev[1];
	end
	if (
		( outGenerico1_expected_prev[2] !== 1'bx ) && ( outGenerico1_prev[2] !== outGenerico1_expected_prev[2] )
		&& ((outGenerico1_expected_prev[2] !== last_outGenerico1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico1_expected_prev);
		$display ("     Real value = %b", outGenerico1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outGenerico1_exp[2] = outGenerico1_expected_prev[2];
	end
	if (
		( outGenerico1_expected_prev[3] !== 1'bx ) && ( outGenerico1_prev[3] !== outGenerico1_expected_prev[3] )
		&& ((outGenerico1_expected_prev[3] !== last_outGenerico1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico1_expected_prev);
		$display ("     Real value = %b", outGenerico1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outGenerico1_exp[3] = outGenerico1_expected_prev[3];
	end
	if (
		( outGenerico1_expected_prev[4] !== 1'bx ) && ( outGenerico1_prev[4] !== outGenerico1_expected_prev[4] )
		&& ((outGenerico1_expected_prev[4] !== last_outGenerico1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico1_expected_prev);
		$display ("     Real value = %b", outGenerico1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outGenerico1_exp[4] = outGenerico1_expected_prev[4];
	end
	if (
		( outGenerico1_expected_prev[5] !== 1'bx ) && ( outGenerico1_prev[5] !== outGenerico1_expected_prev[5] )
		&& ((outGenerico1_expected_prev[5] !== last_outGenerico1_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico1_expected_prev);
		$display ("     Real value = %b", outGenerico1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outGenerico1_exp[5] = outGenerico1_expected_prev[5];
	end
	if (
		( outGenerico1_expected_prev[6] !== 1'bx ) && ( outGenerico1_prev[6] !== outGenerico1_expected_prev[6] )
		&& ((outGenerico1_expected_prev[6] !== last_outGenerico1_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico1_expected_prev);
		$display ("     Real value = %b", outGenerico1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outGenerico1_exp[6] = outGenerico1_expected_prev[6];
	end
	if (
		( outGenerico1_expected_prev[7] !== 1'bx ) && ( outGenerico1_prev[7] !== outGenerico1_expected_prev[7] )
		&& ((outGenerico1_expected_prev[7] !== last_outGenerico1_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico1_expected_prev);
		$display ("     Real value = %b", outGenerico1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outGenerico1_exp[7] = outGenerico1_expected_prev[7];
	end
	if (
		( outGenerico1_expected_prev[8] !== 1'bx ) && ( outGenerico1_prev[8] !== outGenerico1_expected_prev[8] )
		&& ((outGenerico1_expected_prev[8] !== last_outGenerico1_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico1_expected_prev);
		$display ("     Real value = %b", outGenerico1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outGenerico1_exp[8] = outGenerico1_expected_prev[8];
	end
	if (
		( outGenerico1_expected_prev[9] !== 1'bx ) && ( outGenerico1_prev[9] !== outGenerico1_expected_prev[9] )
		&& ((outGenerico1_expected_prev[9] !== last_outGenerico1_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico1_expected_prev);
		$display ("     Real value = %b", outGenerico1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outGenerico1_exp[9] = outGenerico1_expected_prev[9];
	end
	if (
		( outGenerico1_expected_prev[10] !== 1'bx ) && ( outGenerico1_prev[10] !== outGenerico1_expected_prev[10] )
		&& ((outGenerico1_expected_prev[10] !== last_outGenerico1_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico1_expected_prev);
		$display ("     Real value = %b", outGenerico1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outGenerico1_exp[10] = outGenerico1_expected_prev[10];
	end
	if (
		( outGenerico1_expected_prev[11] !== 1'bx ) && ( outGenerico1_prev[11] !== outGenerico1_expected_prev[11] )
		&& ((outGenerico1_expected_prev[11] !== last_outGenerico1_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico1_expected_prev);
		$display ("     Real value = %b", outGenerico1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outGenerico1_exp[11] = outGenerico1_expected_prev[11];
	end
	if (
		( outGenerico1_expected_prev[12] !== 1'bx ) && ( outGenerico1_prev[12] !== outGenerico1_expected_prev[12] )
		&& ((outGenerico1_expected_prev[12] !== last_outGenerico1_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico1_expected_prev);
		$display ("     Real value = %b", outGenerico1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outGenerico1_exp[12] = outGenerico1_expected_prev[12];
	end
	if (
		( outGenerico1_expected_prev[13] !== 1'bx ) && ( outGenerico1_prev[13] !== outGenerico1_expected_prev[13] )
		&& ((outGenerico1_expected_prev[13] !== last_outGenerico1_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico1_expected_prev);
		$display ("     Real value = %b", outGenerico1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outGenerico1_exp[13] = outGenerico1_expected_prev[13];
	end
	if (
		( outGenerico1_expected_prev[14] !== 1'bx ) && ( outGenerico1_prev[14] !== outGenerico1_expected_prev[14] )
		&& ((outGenerico1_expected_prev[14] !== last_outGenerico1_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico1_expected_prev);
		$display ("     Real value = %b", outGenerico1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outGenerico1_exp[14] = outGenerico1_expected_prev[14];
	end
	if (
		( outGenerico1_expected_prev[15] !== 1'bx ) && ( outGenerico1_prev[15] !== outGenerico1_expected_prev[15] )
		&& ((outGenerico1_expected_prev[15] !== last_outGenerico1_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico1_expected_prev);
		$display ("     Real value = %b", outGenerico1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outGenerico1_exp[15] = outGenerico1_expected_prev[15];
	end
	if (
		( outGenerico2_expected_prev[0] !== 1'bx ) && ( outGenerico2_prev[0] !== outGenerico2_expected_prev[0] )
		&& ((outGenerico2_expected_prev[0] !== last_outGenerico2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico2_expected_prev);
		$display ("     Real value = %b", outGenerico2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outGenerico2_exp[0] = outGenerico2_expected_prev[0];
	end
	if (
		( outGenerico2_expected_prev[1] !== 1'bx ) && ( outGenerico2_prev[1] !== outGenerico2_expected_prev[1] )
		&& ((outGenerico2_expected_prev[1] !== last_outGenerico2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico2_expected_prev);
		$display ("     Real value = %b", outGenerico2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outGenerico2_exp[1] = outGenerico2_expected_prev[1];
	end
	if (
		( outGenerico2_expected_prev[2] !== 1'bx ) && ( outGenerico2_prev[2] !== outGenerico2_expected_prev[2] )
		&& ((outGenerico2_expected_prev[2] !== last_outGenerico2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico2_expected_prev);
		$display ("     Real value = %b", outGenerico2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outGenerico2_exp[2] = outGenerico2_expected_prev[2];
	end
	if (
		( outGenerico2_expected_prev[3] !== 1'bx ) && ( outGenerico2_prev[3] !== outGenerico2_expected_prev[3] )
		&& ((outGenerico2_expected_prev[3] !== last_outGenerico2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico2_expected_prev);
		$display ("     Real value = %b", outGenerico2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outGenerico2_exp[3] = outGenerico2_expected_prev[3];
	end
	if (
		( outGenerico2_expected_prev[4] !== 1'bx ) && ( outGenerico2_prev[4] !== outGenerico2_expected_prev[4] )
		&& ((outGenerico2_expected_prev[4] !== last_outGenerico2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico2_expected_prev);
		$display ("     Real value = %b", outGenerico2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outGenerico2_exp[4] = outGenerico2_expected_prev[4];
	end
	if (
		( outGenerico2_expected_prev[5] !== 1'bx ) && ( outGenerico2_prev[5] !== outGenerico2_expected_prev[5] )
		&& ((outGenerico2_expected_prev[5] !== last_outGenerico2_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico2_expected_prev);
		$display ("     Real value = %b", outGenerico2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outGenerico2_exp[5] = outGenerico2_expected_prev[5];
	end
	if (
		( outGenerico2_expected_prev[6] !== 1'bx ) && ( outGenerico2_prev[6] !== outGenerico2_expected_prev[6] )
		&& ((outGenerico2_expected_prev[6] !== last_outGenerico2_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico2_expected_prev);
		$display ("     Real value = %b", outGenerico2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outGenerico2_exp[6] = outGenerico2_expected_prev[6];
	end
	if (
		( outGenerico2_expected_prev[7] !== 1'bx ) && ( outGenerico2_prev[7] !== outGenerico2_expected_prev[7] )
		&& ((outGenerico2_expected_prev[7] !== last_outGenerico2_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico2_expected_prev);
		$display ("     Real value = %b", outGenerico2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outGenerico2_exp[7] = outGenerico2_expected_prev[7];
	end
	if (
		( outGenerico2_expected_prev[8] !== 1'bx ) && ( outGenerico2_prev[8] !== outGenerico2_expected_prev[8] )
		&& ((outGenerico2_expected_prev[8] !== last_outGenerico2_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico2_expected_prev);
		$display ("     Real value = %b", outGenerico2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outGenerico2_exp[8] = outGenerico2_expected_prev[8];
	end
	if (
		( outGenerico2_expected_prev[9] !== 1'bx ) && ( outGenerico2_prev[9] !== outGenerico2_expected_prev[9] )
		&& ((outGenerico2_expected_prev[9] !== last_outGenerico2_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico2_expected_prev);
		$display ("     Real value = %b", outGenerico2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outGenerico2_exp[9] = outGenerico2_expected_prev[9];
	end
	if (
		( outGenerico2_expected_prev[10] !== 1'bx ) && ( outGenerico2_prev[10] !== outGenerico2_expected_prev[10] )
		&& ((outGenerico2_expected_prev[10] !== last_outGenerico2_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico2_expected_prev);
		$display ("     Real value = %b", outGenerico2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outGenerico2_exp[10] = outGenerico2_expected_prev[10];
	end
	if (
		( outGenerico3_expected_prev[0] !== 1'bx ) && ( outGenerico3_prev[0] !== outGenerico3_expected_prev[0] )
		&& ((outGenerico3_expected_prev[0] !== last_outGenerico3_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico3_expected_prev);
		$display ("     Real value = %b", outGenerico3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outGenerico3_exp[0] = outGenerico3_expected_prev[0];
	end
	if (
		( outGenerico3_expected_prev[1] !== 1'bx ) && ( outGenerico3_prev[1] !== outGenerico3_expected_prev[1] )
		&& ((outGenerico3_expected_prev[1] !== last_outGenerico3_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico3_expected_prev);
		$display ("     Real value = %b", outGenerico3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outGenerico3_exp[1] = outGenerico3_expected_prev[1];
	end
	if (
		( outGenerico3_expected_prev[2] !== 1'bx ) && ( outGenerico3_prev[2] !== outGenerico3_expected_prev[2] )
		&& ((outGenerico3_expected_prev[2] !== last_outGenerico3_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico3_expected_prev);
		$display ("     Real value = %b", outGenerico3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outGenerico3_exp[2] = outGenerico3_expected_prev[2];
	end
	if (
		( outGenerico3_expected_prev[3] !== 1'bx ) && ( outGenerico3_prev[3] !== outGenerico3_expected_prev[3] )
		&& ((outGenerico3_expected_prev[3] !== last_outGenerico3_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico3_expected_prev);
		$display ("     Real value = %b", outGenerico3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outGenerico3_exp[3] = outGenerico3_expected_prev[3];
	end
	if (
		( outGenerico3_expected_prev[4] !== 1'bx ) && ( outGenerico3_prev[4] !== outGenerico3_expected_prev[4] )
		&& ((outGenerico3_expected_prev[4] !== last_outGenerico3_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico3_expected_prev);
		$display ("     Real value = %b", outGenerico3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outGenerico3_exp[4] = outGenerico3_expected_prev[4];
	end
	if (
		( outGenerico3_expected_prev[5] !== 1'bx ) && ( outGenerico3_prev[5] !== outGenerico3_expected_prev[5] )
		&& ((outGenerico3_expected_prev[5] !== last_outGenerico3_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico3_expected_prev);
		$display ("     Real value = %b", outGenerico3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outGenerico3_exp[5] = outGenerico3_expected_prev[5];
	end
	if (
		( outGenerico3_expected_prev[6] !== 1'bx ) && ( outGenerico3_prev[6] !== outGenerico3_expected_prev[6] )
		&& ((outGenerico3_expected_prev[6] !== last_outGenerico3_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico3_expected_prev);
		$display ("     Real value = %b", outGenerico3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outGenerico3_exp[6] = outGenerico3_expected_prev[6];
	end
	if (
		( outGenerico3_expected_prev[7] !== 1'bx ) && ( outGenerico3_prev[7] !== outGenerico3_expected_prev[7] )
		&& ((outGenerico3_expected_prev[7] !== last_outGenerico3_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico3_expected_prev);
		$display ("     Real value = %b", outGenerico3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outGenerico3_exp[7] = outGenerico3_expected_prev[7];
	end
	if (
		( outGenerico4_expected_prev[0] !== 1'bx ) && ( outGenerico4_prev[0] !== outGenerico4_expected_prev[0] )
		&& ((outGenerico4_expected_prev[0] !== last_outGenerico4_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico4_expected_prev);
		$display ("     Real value = %b", outGenerico4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outGenerico4_exp[0] = outGenerico4_expected_prev[0];
	end
	if (
		( outGenerico4_expected_prev[1] !== 1'bx ) && ( outGenerico4_prev[1] !== outGenerico4_expected_prev[1] )
		&& ((outGenerico4_expected_prev[1] !== last_outGenerico4_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico4_expected_prev);
		$display ("     Real value = %b", outGenerico4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outGenerico4_exp[1] = outGenerico4_expected_prev[1];
	end
	if (
		( outGenerico4_expected_prev[2] !== 1'bx ) && ( outGenerico4_prev[2] !== outGenerico4_expected_prev[2] )
		&& ((outGenerico4_expected_prev[2] !== last_outGenerico4_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico4_expected_prev);
		$display ("     Real value = %b", outGenerico4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outGenerico4_exp[2] = outGenerico4_expected_prev[2];
	end
	if (
		( outGenerico4_expected_prev[3] !== 1'bx ) && ( outGenerico4_prev[3] !== outGenerico4_expected_prev[3] )
		&& ((outGenerico4_expected_prev[3] !== last_outGenerico4_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico4_expected_prev);
		$display ("     Real value = %b", outGenerico4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outGenerico4_exp[3] = outGenerico4_expected_prev[3];
	end
	if (
		( outGenerico4_expected_prev[4] !== 1'bx ) && ( outGenerico4_prev[4] !== outGenerico4_expected_prev[4] )
		&& ((outGenerico4_expected_prev[4] !== last_outGenerico4_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico4_expected_prev);
		$display ("     Real value = %b", outGenerico4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outGenerico4_exp[4] = outGenerico4_expected_prev[4];
	end
	if (
		( outGenerico4_expected_prev[5] !== 1'bx ) && ( outGenerico4_prev[5] !== outGenerico4_expected_prev[5] )
		&& ((outGenerico4_expected_prev[5] !== last_outGenerico4_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico4_expected_prev);
		$display ("     Real value = %b", outGenerico4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outGenerico4_exp[5] = outGenerico4_expected_prev[5];
	end
	if (
		( outGenerico4_expected_prev[6] !== 1'bx ) && ( outGenerico4_prev[6] !== outGenerico4_expected_prev[6] )
		&& ((outGenerico4_expected_prev[6] !== last_outGenerico4_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico4_expected_prev);
		$display ("     Real value = %b", outGenerico4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outGenerico4_exp[6] = outGenerico4_expected_prev[6];
	end
	if (
		( outGenerico4_expected_prev[7] !== 1'bx ) && ( outGenerico4_prev[7] !== outGenerico4_expected_prev[7] )
		&& ((outGenerico4_expected_prev[7] !== last_outGenerico4_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico4[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico4_expected_prev);
		$display ("     Real value = %b", outGenerico4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outGenerico4_exp[7] = outGenerico4_expected_prev[7];
	end
	if (
		( outGenerico5_expected_prev[0] !== 1'bx ) && ( outGenerico5_prev[0] !== outGenerico5_expected_prev[0] )
		&& ((outGenerico5_expected_prev[0] !== last_outGenerico5_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico5[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico5_expected_prev);
		$display ("     Real value = %b", outGenerico5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outGenerico5_exp[0] = outGenerico5_expected_prev[0];
	end
	if (
		( outGenerico5_expected_prev[1] !== 1'bx ) && ( outGenerico5_prev[1] !== outGenerico5_expected_prev[1] )
		&& ((outGenerico5_expected_prev[1] !== last_outGenerico5_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico5[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico5_expected_prev);
		$display ("     Real value = %b", outGenerico5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outGenerico5_exp[1] = outGenerico5_expected_prev[1];
	end
	if (
		( outGenerico5_expected_prev[2] !== 1'bx ) && ( outGenerico5_prev[2] !== outGenerico5_expected_prev[2] )
		&& ((outGenerico5_expected_prev[2] !== last_outGenerico5_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico5[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico5_expected_prev);
		$display ("     Real value = %b", outGenerico5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outGenerico5_exp[2] = outGenerico5_expected_prev[2];
	end
	if (
		( outGenerico5_expected_prev[3] !== 1'bx ) && ( outGenerico5_prev[3] !== outGenerico5_expected_prev[3] )
		&& ((outGenerico5_expected_prev[3] !== last_outGenerico5_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico5[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico5_expected_prev);
		$display ("     Real value = %b", outGenerico5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outGenerico5_exp[3] = outGenerico5_expected_prev[3];
	end
	if (
		( outGenerico5_expected_prev[4] !== 1'bx ) && ( outGenerico5_prev[4] !== outGenerico5_expected_prev[4] )
		&& ((outGenerico5_expected_prev[4] !== last_outGenerico5_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico5[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico5_expected_prev);
		$display ("     Real value = %b", outGenerico5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outGenerico5_exp[4] = outGenerico5_expected_prev[4];
	end
	if (
		( outGenerico5_expected_prev[5] !== 1'bx ) && ( outGenerico5_prev[5] !== outGenerico5_expected_prev[5] )
		&& ((outGenerico5_expected_prev[5] !== last_outGenerico5_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico5[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico5_expected_prev);
		$display ("     Real value = %b", outGenerico5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outGenerico5_exp[5] = outGenerico5_expected_prev[5];
	end
	if (
		( outGenerico5_expected_prev[6] !== 1'bx ) && ( outGenerico5_prev[6] !== outGenerico5_expected_prev[6] )
		&& ((outGenerico5_expected_prev[6] !== last_outGenerico5_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico5[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico5_expected_prev);
		$display ("     Real value = %b", outGenerico5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outGenerico5_exp[6] = outGenerico5_expected_prev[6];
	end
	if (
		( outGenerico5_expected_prev[7] !== 1'bx ) && ( outGenerico5_prev[7] !== outGenerico5_expected_prev[7] )
		&& ((outGenerico5_expected_prev[7] !== last_outGenerico5_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico5[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico5_expected_prev);
		$display ("     Real value = %b", outGenerico5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outGenerico5_exp[7] = outGenerico5_expected_prev[7];
	end
	if (
		( outGenerico6_expected_prev[0] !== 1'bx ) && ( outGenerico6_prev[0] !== outGenerico6_expected_prev[0] )
		&& ((outGenerico6_expected_prev[0] !== last_outGenerico6_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico6[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico6_expected_prev);
		$display ("     Real value = %b", outGenerico6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outGenerico6_exp[0] = outGenerico6_expected_prev[0];
	end
	if (
		( outGenerico6_expected_prev[1] !== 1'bx ) && ( outGenerico6_prev[1] !== outGenerico6_expected_prev[1] )
		&& ((outGenerico6_expected_prev[1] !== last_outGenerico6_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico6[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico6_expected_prev);
		$display ("     Real value = %b", outGenerico6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outGenerico6_exp[1] = outGenerico6_expected_prev[1];
	end
	if (
		( outGenerico6_expected_prev[2] !== 1'bx ) && ( outGenerico6_prev[2] !== outGenerico6_expected_prev[2] )
		&& ((outGenerico6_expected_prev[2] !== last_outGenerico6_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico6[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico6_expected_prev);
		$display ("     Real value = %b", outGenerico6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outGenerico6_exp[2] = outGenerico6_expected_prev[2];
	end
	if (
		( outGenerico6_expected_prev[3] !== 1'bx ) && ( outGenerico6_prev[3] !== outGenerico6_expected_prev[3] )
		&& ((outGenerico6_expected_prev[3] !== last_outGenerico6_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico6[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico6_expected_prev);
		$display ("     Real value = %b", outGenerico6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outGenerico6_exp[3] = outGenerico6_expected_prev[3];
	end
	if (
		( outGenerico6_expected_prev[4] !== 1'bx ) && ( outGenerico6_prev[4] !== outGenerico6_expected_prev[4] )
		&& ((outGenerico6_expected_prev[4] !== last_outGenerico6_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico6[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico6_expected_prev);
		$display ("     Real value = %b", outGenerico6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outGenerico6_exp[4] = outGenerico6_expected_prev[4];
	end
	if (
		( outGenerico6_expected_prev[5] !== 1'bx ) && ( outGenerico6_prev[5] !== outGenerico6_expected_prev[5] )
		&& ((outGenerico6_expected_prev[5] !== last_outGenerico6_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico6[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico6_expected_prev);
		$display ("     Real value = %b", outGenerico6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outGenerico6_exp[5] = outGenerico6_expected_prev[5];
	end
	if (
		( outGenerico6_expected_prev[6] !== 1'bx ) && ( outGenerico6_prev[6] !== outGenerico6_expected_prev[6] )
		&& ((outGenerico6_expected_prev[6] !== last_outGenerico6_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico6[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico6_expected_prev);
		$display ("     Real value = %b", outGenerico6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outGenerico6_exp[6] = outGenerico6_expected_prev[6];
	end
	if (
		( outGenerico6_expected_prev[7] !== 1'bx ) && ( outGenerico6_prev[7] !== outGenerico6_expected_prev[7] )
		&& ((outGenerico6_expected_prev[7] !== last_outGenerico6_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico6[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico6_expected_prev);
		$display ("     Real value = %b", outGenerico6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outGenerico6_exp[7] = outGenerico6_expected_prev[7];
	end
	if (
		( outGenerico7_expected_prev !== 1'bx ) && ( outGenerico7_prev !== outGenerico7_expected_prev )
		&& ((outGenerico7_expected_prev !== last_outGenerico7_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outGenerico7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outGenerico7_expected_prev);
		$display ("     Real value = %b", outGenerico7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_outGenerico7_exp = outGenerico7_expected_prev;
	end
	if (
		( ResetOut_expected_prev !== 1'bx ) && ( ResetOut_prev !== ResetOut_expected_prev )
		&& ((ResetOut_expected_prev !== last_ResetOut_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ResetOut :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ResetOut_expected_prev);
		$display ("     Real value = %b", ResetOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ResetOut_exp = ResetOut_expected_prev;
	end
	if (
		( RO1_outC_expected_prev[0] !== 1'bx ) && ( RO1_outC_prev[0] !== RO1_outC_expected_prev[0] )
		&& ((RO1_outC_expected_prev[0] !== last_RO1_outC_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RO1_outC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RO1_outC_expected_prev);
		$display ("     Real value = %b", RO1_outC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_RO1_outC_exp[0] = RO1_outC_expected_prev[0];
	end
	if (
		( RO1_outC_expected_prev[1] !== 1'bx ) && ( RO1_outC_prev[1] !== RO1_outC_expected_prev[1] )
		&& ((RO1_outC_expected_prev[1] !== last_RO1_outC_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RO1_outC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RO1_outC_expected_prev);
		$display ("     Real value = %b", RO1_outC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_RO1_outC_exp[1] = RO1_outC_expected_prev[1];
	end
	if (
		( RO1_outC_expected_prev[2] !== 1'bx ) && ( RO1_outC_prev[2] !== RO1_outC_expected_prev[2] )
		&& ((RO1_outC_expected_prev[2] !== last_RO1_outC_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RO1_outC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RO1_outC_expected_prev);
		$display ("     Real value = %b", RO1_outC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_RO1_outC_exp[2] = RO1_outC_expected_prev[2];
	end
	if (
		( RO1_outC_expected_prev[3] !== 1'bx ) && ( RO1_outC_prev[3] !== RO1_outC_expected_prev[3] )
		&& ((RO1_outC_expected_prev[3] !== last_RO1_outC_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RO1_outC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RO1_outC_expected_prev);
		$display ("     Real value = %b", RO1_outC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_RO1_outC_exp[3] = RO1_outC_expected_prev[3];
	end
	if (
		( RO1_outC_expected_prev[4] !== 1'bx ) && ( RO1_outC_prev[4] !== RO1_outC_expected_prev[4] )
		&& ((RO1_outC_expected_prev[4] !== last_RO1_outC_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RO1_outC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RO1_outC_expected_prev);
		$display ("     Real value = %b", RO1_outC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_RO1_outC_exp[4] = RO1_outC_expected_prev[4];
	end
	if (
		( RO1_outC_expected_prev[5] !== 1'bx ) && ( RO1_outC_prev[5] !== RO1_outC_expected_prev[5] )
		&& ((RO1_outC_expected_prev[5] !== last_RO1_outC_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RO1_outC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RO1_outC_expected_prev);
		$display ("     Real value = %b", RO1_outC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_RO1_outC_exp[5] = RO1_outC_expected_prev[5];
	end
	if (
		( RO1_outC_expected_prev[6] !== 1'bx ) && ( RO1_outC_prev[6] !== RO1_outC_expected_prev[6] )
		&& ((RO1_outC_expected_prev[6] !== last_RO1_outC_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RO1_outC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RO1_outC_expected_prev);
		$display ("     Real value = %b", RO1_outC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_RO1_outC_exp[6] = RO1_outC_expected_prev[6];
	end
	if (
		( RO1_outC_expected_prev[7] !== 1'bx ) && ( RO1_outC_prev[7] !== RO1_outC_expected_prev[7] )
		&& ((RO1_outC_expected_prev[7] !== last_RO1_outC_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RO1_outC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RO1_outC_expected_prev);
		$display ("     Real value = %b", RO1_outC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_RO1_outC_exp[7] = RO1_outC_expected_prev[7];
	end
	if (
		( RO2_outC_expected_prev[0] !== 1'bx ) && ( RO2_outC_prev[0] !== RO2_outC_expected_prev[0] )
		&& ((RO2_outC_expected_prev[0] !== last_RO2_outC_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RO2_outC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RO2_outC_expected_prev);
		$display ("     Real value = %b", RO2_outC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RO2_outC_exp[0] = RO2_outC_expected_prev[0];
	end
	if (
		( RO2_outC_expected_prev[1] !== 1'bx ) && ( RO2_outC_prev[1] !== RO2_outC_expected_prev[1] )
		&& ((RO2_outC_expected_prev[1] !== last_RO2_outC_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RO2_outC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RO2_outC_expected_prev);
		$display ("     Real value = %b", RO2_outC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RO2_outC_exp[1] = RO2_outC_expected_prev[1];
	end
	if (
		( RO2_outC_expected_prev[2] !== 1'bx ) && ( RO2_outC_prev[2] !== RO2_outC_expected_prev[2] )
		&& ((RO2_outC_expected_prev[2] !== last_RO2_outC_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RO2_outC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RO2_outC_expected_prev);
		$display ("     Real value = %b", RO2_outC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RO2_outC_exp[2] = RO2_outC_expected_prev[2];
	end
	if (
		( RO2_outC_expected_prev[3] !== 1'bx ) && ( RO2_outC_prev[3] !== RO2_outC_expected_prev[3] )
		&& ((RO2_outC_expected_prev[3] !== last_RO2_outC_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RO2_outC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RO2_outC_expected_prev);
		$display ("     Real value = %b", RO2_outC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RO2_outC_exp[3] = RO2_outC_expected_prev[3];
	end
	if (
		( RO2_outC_expected_prev[4] !== 1'bx ) && ( RO2_outC_prev[4] !== RO2_outC_expected_prev[4] )
		&& ((RO2_outC_expected_prev[4] !== last_RO2_outC_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RO2_outC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RO2_outC_expected_prev);
		$display ("     Real value = %b", RO2_outC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RO2_outC_exp[4] = RO2_outC_expected_prev[4];
	end
	if (
		( RO2_outC_expected_prev[5] !== 1'bx ) && ( RO2_outC_prev[5] !== RO2_outC_expected_prev[5] )
		&& ((RO2_outC_expected_prev[5] !== last_RO2_outC_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RO2_outC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RO2_outC_expected_prev);
		$display ("     Real value = %b", RO2_outC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RO2_outC_exp[5] = RO2_outC_expected_prev[5];
	end
	if (
		( RO2_outC_expected_prev[6] !== 1'bx ) && ( RO2_outC_prev[6] !== RO2_outC_expected_prev[6] )
		&& ((RO2_outC_expected_prev[6] !== last_RO2_outC_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RO2_outC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RO2_outC_expected_prev);
		$display ("     Real value = %b", RO2_outC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RO2_outC_exp[6] = RO2_outC_expected_prev[6];
	end
	if (
		( RO2_outC_expected_prev[7] !== 1'bx ) && ( RO2_outC_prev[7] !== RO2_outC_expected_prev[7] )
		&& ((RO2_outC_expected_prev[7] !== last_RO2_outC_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RO2_outC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RO2_outC_expected_prev);
		$display ("     Real value = %b", RO2_outC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RO2_outC_exp[7] = RO2_outC_expected_prev[7];
	end
	if (
		( saiClock_expected_prev !== 1'bx ) && ( saiClock_prev !== saiClock_expected_prev )
		&& ((saiClock_expected_prev !== last_saiClock_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saiClock :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saiClock_expected_prev);
		$display ("     Real value = %b", saiClock_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_saiClock_exp = saiClock_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#20000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module micro_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg reset;
reg [7:0] RI1_inC;
reg [7:0] RI2_inC;
// wires                                               
wire [15:0] outGenerico1;
wire [10:0] outGenerico2;
wire [7:0] outGenerico3;
wire [7:0] outGenerico4;
wire [7:0] outGenerico5;
wire [7:0] outGenerico6;
wire outGenerico7;
wire ResetOut;
wire [7:0] RO1_outC;
wire [7:0] RO2_outC;
wire saiClock;

wire sampler;                             

// assign statements (if any)                          
micro i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.outGenerico1(outGenerico1),
	.outGenerico2(outGenerico2),
	.outGenerico3(outGenerico3),
	.outGenerico4(outGenerico4),
	.outGenerico5(outGenerico5),
	.outGenerico6(outGenerico6),
	.outGenerico7(outGenerico7),
	.reset(reset),
	.ResetOut(ResetOut),
	.RI1_inC(RI1_inC),
	.RI2_inC(RI2_inC),
	.RO1_outC(RO1_outC),
	.RO2_outC(RO2_outC),
	.saiClock(saiClock)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #20000 1'b0;
end 
// RI1_inC[ 7 ]
initial
begin
	RI1_inC[7] = 1'b0;
	RI1_inC[7] = #15040000 1'b1;
	RI1_inC[7] = #960000 1'b0;
end 
// RI1_inC[ 6 ]
initial
begin
	RI1_inC[6] = 1'b0;
	RI1_inC[6] = #13440000 1'b1;
	RI1_inC[6] = #960000 1'b0;
end 
// RI1_inC[ 5 ]
initial
begin
	RI1_inC[5] = 1'b0;
	RI1_inC[5] = #11200000 1'b1;
	RI1_inC[5] = #1280000 1'b0;
end 
// RI1_inC[ 4 ]
initial
begin
	RI1_inC[4] = 1'b0;
	RI1_inC[4] = #8960000 1'b1;
	RI1_inC[4] = #1280000 1'b0;
end 
// RI1_inC[ 3 ]
initial
begin
	RI1_inC[3] = 1'b0;
	RI1_inC[3] = #7040000 1'b1;
	RI1_inC[3] = #1280000 1'b0;
end 
// RI1_inC[ 2 ]
initial
begin
	RI1_inC[2] = 1'b0;
	RI1_inC[2] = #5120000 1'b1;
	RI1_inC[2] = #1280000 1'b0;
end 
// RI1_inC[ 1 ]
initial
begin
	RI1_inC[1] = 1'b0;
	RI1_inC[1] = #2880000 1'b1;
	RI1_inC[1] = #1280000 1'b0;
end 
// RI1_inC[ 0 ]
initial
begin
	RI1_inC[0] = 1'b0;
	RI1_inC[0] = #960000 1'b1;
	RI1_inC[0] = #1280000 1'b0;
end 
// RI2_inC[ 7 ]
initial
begin
	RI2_inC[7] = 1'b0;
end 
// RI2_inC[ 6 ]
initial
begin
	RI2_inC[6] = 1'b0;
end 
// RI2_inC[ 5 ]
initial
begin
	RI2_inC[5] = 1'b0;
end 
// RI2_inC[ 4 ]
initial
begin
	RI2_inC[4] = 1'b0;
end 
// RI2_inC[ 3 ]
initial
begin
	RI2_inC[3] = 1'b0;
	RI2_inC[3] = #1280000 1'b1;
	RI2_inC[3] = #1280000 1'b0;
	RI2_inC[3] = #320000 1'b1;
	RI2_inC[3] = #1600000 1'b0;
end 
// RI2_inC[ 2 ]
initial
begin
	RI2_inC[2] = 1'b0;
	RI2_inC[2] = #2880000 1'b1;
	RI2_inC[2] = #1600000 1'b0;
end 
// RI2_inC[ 1 ]
initial
begin
	RI2_inC[1] = 1'b0;
	RI2_inC[1] = #1280000 1'b1;
	RI2_inC[1] = #1280000 1'b0;
	RI2_inC[1] = #320000 1'b1;
	RI2_inC[1] = #1600000 1'b0;
end 
// RI2_inC[ 0 ]
initial
begin
	RI2_inC[0] = 1'b0;
	RI2_inC[0] = #2880000 1'b1;
	RI2_inC[0] = #1600000 1'b0;
end 

micro_vlg_sample_tst tb_sample (
	.clk(clk),
	.reset(reset),
	.RI1_inC(RI1_inC),
	.RI2_inC(RI2_inC),
	.sampler_tx(sampler)
);

micro_vlg_check_tst tb_out(
	.outGenerico1(outGenerico1),
	.outGenerico2(outGenerico2),
	.outGenerico3(outGenerico3),
	.outGenerico4(outGenerico4),
	.outGenerico5(outGenerico5),
	.outGenerico6(outGenerico6),
	.outGenerico7(outGenerico7),
	.ResetOut(ResetOut),
	.RO1_outC(RO1_outC),
	.RO2_outC(RO2_outC),
	.saiClock(saiClock),
	.sampler_rx(sampler)
);
endmodule

